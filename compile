#!/usr/bin/env node

console.log('Start building');

const fs = require('fs');
const version = parseInt(fs.readFileSync('./version').toString()) + 1;
console.log('Version:', version);

fs.writeFileSync('./version', version);
fs.writeFileSync('./version.h', 
`\n\
#ifndef __VERSION_H__\n\
#define __VERSION_H__\n\
\n\
#define VERSION "0.${version}"\n\
\n\
#endif\n\
\n`);

const process = require('process');
let args = process.argv.slice(2).join(' ');

const exec = require('child_process').exec;

const FgRed = '\x1b[31m';
const FgGreen = '\x1b[32m';
const FgWhite = '\x1b[37m';
const BgRed = '\x1b[41m';
const Reset = '\x1b[0m';
const FgYellow = '\x1b[33m';
const FgCyan = '\x1b[36m';

let needOtaUpload = false;
if (args.indexOf('upload') === 0) {
    needOtaUpload = args.split(' ')[1];
    !needOtaUpload && console.log(BgRed, 'For upload, provide IP of device', Reset);
    args = '';
}

let asError = false;
const pipe = exec(`make ${args}`);
pipe.stdout.on('data', data => {
    const isUploading = data.trim().match(/[0-9]+ \([0-9]+ \%\)/i);
    if (isUploading) {
        console.log('\033[F\033[K', FgCyan, data.trim());
    } else {
        console.log(FgGreen, data.trim());
    }
});
pipe.stderr.on('data', data => {
    const isError = data.indexOf('error') !== -1 || data.indexOf('Error') !== -1;
    console.log(isError ? FgRed : FgYellow, data.trim());
    asError = asError || isError;
});
pipe.on('close', () => {
    if (!asError && needOtaUpload) {
        const pipe2 = exec(`bash -c "node node-tftp/bin/ntftp.js put firmware/firmware.bin tftp://${needOtaUpload}/firmware.bin"`);
        pipe2.stdout.on('data', data => console.log('\033[F\033[K', FgCyan, data.trim()));
        pipe2.stderr.on('data', data => console.log(FgRed, data.trim()));
        pipe2.on('close', () => console.log(Reset, 'Upload completed.'));
    } else {
        console.log(Reset, 'Completed.');
    }
});
